import java.util.jar.JarFile
import org.yaml.snakeyaml.Yaml

buildscript{
    dependencies{
        classpath("org.yaml:snakeyaml:1.33")
    }
    repositories {
        mavenCentral {
            url "$System.env.MAVEN_URL"
            credentials {
                username = "$System.env.MAVEN_USERNAME"
                password = "$System.env.MAVEN_PASSWORD"
            }
        }
    }
}

plugins {
    id 'java'
    id 'groovy'
}

// Use environment instead of gradle.properties
if("$System.env.MAVEN_URL" != null) {
    ext.MAVEN_URL="$System.env.MAVEN_URL"
    ext.MAVEN_PASSWORD="$System.env.MAVEN_PASSWORD"
    ext.MAVEN_USERNAME="$System.env.MAVEN_USERNAME"
}

sourceCompatibility = '1.8'
apply plugin: 'maven-publish'

ext.filesToPublish = []
ext.dir= new File("_plugins")
def files = ext.dir.list().findAll { it.endsWith('.jar') }
files.each {
    ext.filesToPublish << new File(ext.dir, it)
}

println(filesToPublish.toString())

publishing {
    publications {
        for ( f in filesToPublish ) {
            def jarFile = new JarFile(f)
            def pluginYml = jarFile.getEntry("plugin.yml")
            if (pluginYml != null) {
                def yaml = new Yaml()
                def plugin = yaml.load(jarFile.getInputStream(pluginYml))
                def ARTIFACT_ID = plugin.name
                def ARTIFACT_VERSION = plugin.version.toString()
                if(ARTIFACT_VERSION.contains(" ")) {
                    ARTIFACT_VERSION = ARTIFACT_VERSION.replace(" ", "-")
                }
                def ARTIFACT_GROUP = plugin.name
                
                def pomFileName = "${ARTIFACT_ID}-${ARTIFACT_VERSION}.pom"
                def artifactPath = "${ARTIFACT_GROUP.replace(".", "/")}/${ARTIFACT_ID}/${ARTIFACT_VERSION}/${pomFileName}"
                def repositoryUrl = "${MAVEN_URL}${artifactPath}"


                println("# searching for existing artifact with name ${ARTIFACT_ID} version ${ARTIFACT_VERSION}")
                println("")

                if (urlExists(repositoryUrl)) {
                    println("Artifact with version $ARTIFACT_VERSION already exist - increase the version to publish")
                } else {
                    println("# No existing artifact found. Preceding to publish")
                    println("")
                    "$ARTIFACT_ID"(MavenPublication) {
                        artifact f
                        groupId ARTIFACT_GROUP
                        artifactId ARTIFACT_ID
                        version ARTIFACT_VERSION
                        println("Published $ARTIFACT_ID")
                    }
                }
            }
        }
    }
    repositories {
        mavenCentral {
            url "$System.env.MAVEN_URL"
            credentials {
                username = "$System.env.MAVEN_USERNAME"
                password = "$System.env.MAVEN_PASSWORD"
            }
        }
    }
}

def urlExists(String repositoryUrl) {

    try {
        def connection = (HttpURLConnection) new URL(repositoryUrl).openConnection()

        connection.setRequestProperty("Authorization", "Basic " + getBase64EncodedCredentials())
        connection.setConnectTimeout(10000)
        connection.setReadTimeout(10000)
        connection.setRequestMethod("HEAD")

        def responseCode = connection.getResponseCode()

        if (responseCode == 401) {
            throw new RuntimeException("Unauthorized MavenUser user. Please provide valid username and password.")
        }

        return (200 == responseCode)

    } catch (IOException ignored) {
        println(ignored)
        return false
    }
}

def getBase64EncodedCredentials() {
    def s = "$System.env.MAVEN_USERNAME" + ":" + "$System.env.MAVEN_PASSWORD"
    return s.bytes.encodeBase64().toString()
}